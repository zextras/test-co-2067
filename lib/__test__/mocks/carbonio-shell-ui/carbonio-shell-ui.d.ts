import React, { FC, ReactNode } from 'react';
import * as shell from '@zextras/carbonio-shell-ui';
export declare const mockedAccount: shell.Account;
export declare const getUserAccount: jest.Mock<ReturnType<typeof shell.getUserAccount>>;
export declare const useUserAccount: jest.Mock<ReturnType<typeof shell.useUserAccount>>;
export declare const useUserAccounts: jest.Mock<ReturnType<typeof shell.useUserAccounts>>;
export declare const useUserSettings: jest.Mock<shell.AccountSettings, [], any>;
export declare const getUserSettings: jest.Mock<shell.AccountSettings, [], any>;
export declare const t: jest.Mock<string, [key: string], any>;
export declare const replaceHistory: jest.Mock<any, any, any>;
export declare const pushHistory: jest.Mock<any, any, any>;
export declare const useBoard: jest.Mock<any, any, any>;
export declare const useAppContext: jest.Mock<unknown, [], any>;
export declare const setAppContext: jest.Mock<any, any, any>;
export declare const getBridgedFunctions: jest.Mock<any, any, any>;
export declare const addBoard: jest.Mock<any, any, any>;
export declare const closeBoard: jest.Mock<any, any, any>;
export declare const updateBoardContext: jest.Mock<any, any, any>;
export declare const useBoardHooks: jest.Mock<any, any, any>;
export declare const minimizeBoards: jest.Mock<any, any, any>;
export declare const getCurrentRoute: jest.Mock<any, any, any>;
export declare const useIsCarbonioCE: jest.Mock<ReturnType<typeof shell.useIsCarbonioCE>>;
export * from '../network/fetch';
export declare const soapFetch: <Request, Response>(api: string, body: Request, otherAccount?: string) => Promise<Response>;
export declare const useNotify: jest.Mock<ReturnType<typeof shell.useNotify>>;
export declare const useLocalStorage: jest.Mock<any, any, any>;
export declare const AppLink: FC<{
    children: ReactNode;
}>;
export declare const editSettings: jest.Mock<Promise<{
    data: {};
}>, [], any>;
export declare const registerComponents: typeof shell.registerComponents;
export declare const registerActions: typeof shell.registerActions;
export declare const useRefresh: typeof shell.useRefresh;
export declare const addRoute: typeof shell.addRoute;
export declare const removeRoute: typeof shell.removeRoute;
export declare const addSettingsView: typeof shell.addSettingsView;
export declare const addBoardView: typeof shell.addBoardView;
export declare const getBoardById: typeof shell.getBoardById;
export declare const setCurrentBoard: typeof shell.setCurrentBoard;
export declare const reopenBoards: typeof shell.reopenBoards;
export declare const registerFunctions: typeof shell.registerFunctions;
export declare const upsertApp: typeof shell.upsertApp;
export declare const useIntegratedComponent: jest.Mock<(boolean | jest.Mock<React.JSX.Element, [], any>)[], [id: string], any>;
export declare const getIntegratedComponent: jest.Mock<(boolean | jest.Mock<React.JSX.Element, [], any>)[], [id: string], any>;
export declare const getAction: jest.Mock<[shell.Action | undefined, boolean], [type: string, id: string, target?: unknown], any>;
export declare const useActions: jest.Mock<shell.Action[], [context: unknown, type: string], any>;
export declare const getIntegratedFunction: jest.Mock<ReturnType<typeof shell.getIntegratedFunction>, Parameters<typeof shell.getIntegratedFunction>, any>;
export declare const useIntegratedFunction: jest.Mock<ReturnType<typeof shell.useIntegratedFunction>, Parameters<typeof shell.useIntegratedFunction>, any>;
